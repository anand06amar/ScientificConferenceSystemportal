// Generator & datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- NextAuth Models ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Faculty & Room ----------
model Faculty {
  id       String           @id
  name     String
  sessions FacultySession[]

  @@map("faculties")
}

model Room {
  id       String           @id
  name     String
  sessions FacultySession[]

  @@map("rooms")
}

// ---------- Conference / Faculty Sessions ----------
model FacultySession {
  id              String   @id @default(uuid())
  title           String
  facultyId       String
  email           String
  place           String
  roomId          String
  description     String
  time            DateTime
  status          String    // "Draft" | "Confirmed"
  inviteStatus    String    // "Pending" | "Accepted" | "Declined"
  travelStatus    String?
  inviteToken     String    @default(uuid())
  rejectionReason String?
  suggestedTopic  String?

  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([time])
  @@map("sessions") // Keeps the DB table name as "sessions"
}
