// src/app/api/events/export/pdf/route.ts - SIMPLIFIED VERSION (BACKUP)
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth/config';
import { query } from '@/lib/database/connection';

// Simple text-based PDF fallback
export async function GET(request: NextRequest) {
  try {
    console.log('üöÄ Simplified PDF Export API called');
    
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    // Get query parameters
    const { searchParams } = new URL(request.url);
    const eventId = searchParams.get('eventId');
    
    console.log('üìã Exporting event:', eventId);

    // Basic permission check - EVENT_MANAGER role bypass
    const userResult = await query(
      'SELECT role FROM users WHERE id = $1',
      [session.user.id]
    );

    if (userResult.rows.length === 0) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 401 }
      );
    }

    const userRole = userResult.rows[0].role;
    console.log('üë§ User role:', userRole);

    // Allow EVENT_MANAGER and ORGANIZER
    if (!['EVENT_MANAGER', 'ORGANIZER'].includes(userRole)) {
      return NextResponse.json(
        { error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    console.log('‚úÖ Permission granted for role:', userRole);

    // Fetch basic event data
    let eventData = null;
    if (eventId) {
      const eventResult = await query(
        'SELECT id, name, description, start_date, end_date, location, status FROM events WHERE id = $1',
        [eventId]
      );
      
      if (eventResult.rows.length > 0) {
        eventData = eventResult.rows[0];
        console.log('üìä Event data fetched:', eventData.name);
      }
    }

    try {
      // Try jsPDF first
      const { jsPDF } = await import('jspdf');
      const pdf = new jsPDF();
      
      // Basic PDF content
      pdf.setFontSize(16);
      pdf.text('Event Export Report', 20, 20);
      
      pdf.setFontSize(12);
      pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 35);
      
      if (eventData) {
        pdf.text(`Event: ${eventData.name || 'Untitled'}`, 20, 50);
        pdf.text(`Status: ${eventData.status || 'Unknown'}`, 20, 65);
        pdf.text(`Location: ${eventData.location || 'TBD'}`, 20, 80);
        
        if (eventData.start_date) {
          pdf.text(`Start: ${new Date(eventData.start_date).toLocaleDateString()}`, 20, 95);
        }
        
        if (eventData.end_date) {
          pdf.text(`End: ${new Date(eventData.end_date).toLocaleDateString()}`, 20, 110);
        }
      } else {
        pdf.text('All Events Export', 20, 50);
      }
      
      // Convert to buffer
      const pdfBuffer = Buffer.from(pdf.output('arraybuffer'));
      
      console.log('‚úÖ jsPDF generated successfully, size:', pdfBuffer.length);
      
      const filename = `event-export-${new Date().toISOString().slice(0, 10)}.pdf`;
      
      return new NextResponse(pdfBuffer, {
        status: 200,
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="${filename}"`,
          'Content-Length': pdfBuffer.length.toString(),
          'Cache-Control': 'no-cache'
        }
      });
      
    } catch (pdfError) {
      console.error('‚ùå jsPDF failed:', pdfError);
      
      // Fallback to plain text response
      const textContent = `
EVENT EXPORT REPORT
Generated: ${new Date().toLocaleDateString()}

${eventData ? `
Event: ${eventData.name || 'Untitled'}
Status: ${eventData.status || 'Unknown'}
Location: ${eventData.location || 'TBD'}
Start Date: ${eventData.start_date ? new Date(eventData.start_date).toLocaleDateString() : 'TBD'}
End Date: ${eventData.end_date ? new Date(eventData.end_date).toLocaleDateString() : 'TBD'}
Description: ${eventData.description || 'No description'}
` : 'All Events Export'}

---
Generated by Conference Management System
      `.trim();
      
      console.log('üìÑ Falling back to text export');
      
      return new NextResponse(textContent, {
        status: 200,
        headers: {
          'Content-Type': 'text/plain',
          'Content-Disposition': `attachment; filename="event-export-${new Date().toISOString().slice(0, 10)}.txt"`,
          'Cache-Control': 'no-cache'
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå Export API Error:', error);
    
    return NextResponse.json(
      { 
        error: 'Export failed',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// POST handler
export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ PDF Export POST called');
    
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });
    }

    const body = await request.json();
    const { eventId } = body;
    
    console.log('üìã POST Export parameters:', { eventId });
    
    // Redirect to GET method
    const url = new URL(request.url);
    url.searchParams.set('eventId', eventId || '');
    
    return Response.redirect(url.toString().replace('/POST', ''), 302);
    
  } catch (error) {
    console.error('‚ùå PDF Export POST Error:', error);
    return NextResponse.json({ error: 'Export failed' }, { status: 500 });
  }
}